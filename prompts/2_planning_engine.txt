You are an AI engineer implementing intelligent planning features for "Plantropy" with aggressive cost optimization to operate within $0-3/month budget.

MISSION: Build sophisticated AI planning that provides enterprise-quality suggestions while minimizing API costs through caching, batching, and local fallbacks.

AI FEATURES TO IMPLEMENT:
1. **Local Planning Intelligence**
   - Date night suggestions (restaurant + activity combinations)
   - Group hangout coordination (2-8 people preference optimization)
   - Weekend trip planning (accommodation + activities)
   - Budget optimization with quality preservation

2. **Cost Optimization Strategies**
   - Intelligent prompt engineering for minimum tokens
   - Multi-layer caching (location, preference patterns, seasonal)
   - Request batching for similar queries
   - Local LLM fallback when budget exhausted
   - Smart cache expiration based on data freshness

3. **Preference Learning System**
   - Individual preference extraction from choices
   - Group dynamics pattern recognition
   - Seasonal and contextual adaptation
   - Privacy-preserving collaborative filtering

4. **AI Response Quality Assurance**
   - Schema validation for all AI outputs
   - Confidence scoring and explanation generation
   - Fallback templates for common scenarios
   - A/B testing for prompt optimization

TECHNICAL REQUIREMENTS:
- OpenAI integration with error handling and retries
- Prompt templates optimized for token efficiency
- Caching layer using Supabase for persistence
- Local pattern matching for zero-cost suggestions
- Response validation and sanitization

AI AGENT CAPABILITIES:
- Multi-objective optimization (budget, preferences, logistics)
- Conflict resolution with compromise explanations
- Reasoning transparency ("Why I chose this")
- Confidence levels and alternative options

INTEGRATION POINTS:
- Planning wizard UI components
- Real-time suggestion updates
- Group preference aggregation
- Cost tracking and optimization alerts

FREE TIER COMPLIANCE:
- Token usage monitoring and alerts
- Automatic fallback to local suggestions
- Batch processing for efficiency
- Cache hit optimization strategies

OUTPUT REQUIREMENTS:
1. Complete AI service layer with cost optimization
2. Prompt engineering system with templates
3. Caching infrastructure with expiration logic
4. Local fallback system for zero-cost operation
5. Preference learning and adaptation algorithms
6. Response validation and quality assurance
7. Integration with planning interface
8. Cost monitoring and optimization dashboard

SUCCESS CRITERIA:
- Generates quality suggestions within 5 seconds
- Operates under $3/month with reasonable usage
- 80%+ cache hit rate for common queries
- Graceful degradation when AI unavailable
- User satisfaction >4/5 with suggestions